# analisis.py

import matplotlib
matplotlib.use('Agg')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import numpy as np
import json
from json import JSONEncoder
from collections import Counter

# Add a custom JSON encoder class to handle NumPy types
class NumpyEncoder(JSONEncoder):
    """ Custom encoder for numpy data types """
    def default(self, obj):
        if isinstance(obj, (np.integer, np.int64, np.int32)):
            return int(obj)
        elif isinstance(obj, (np.floating, np.float64, np.float32)):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif isinstance(obj, np.bool_):
            return bool(obj)
        return super(NumpyEncoder, self).default(obj)

# --- CONFIGURACI√ìN INICIAL ---
# Estilo de los gr√°ficos
plt.style.use('ggplot')
plt.rcParams['figure.figsize'] = (12, 7)
plt.rcParams['font.sans-serif'] = ['Arial', 'sans-serif']

# Colores personalizados (paleta de Cisco)
CISCO_COLORS = ['#049fd9', '#33ab84', '#8bc34a', '#ffc107', '#ff9800', '#ff5722', '#e91e63', '#9c27b0']
sns.set_palette(CISCO_COLORS)

# Crear carpetas para guardar los gr√°ficos si no existen
if not os.path.exists('static/images'):
    os.makedirs('static/images')

# --- CARGA DE DATOS ---
try:
    df = pd.read_csv('respuestas_cisco.csv')
    print("‚úÖ Archivo CSV cargado exitosamente.")
    
    # Validaci√≥n b√°sica de datos
    if df.empty:
        print("‚ö†Ô∏è Advertencia: El archivo CSV est√° vac√≠o.")
    elif len(df.columns) < 5:
        print("‚ö†Ô∏è Advertencia: El archivo CSV parece no tener suficientes columnas.")
    else:
        print(f"üìä {len(df)} respuestas encontradas con {len(df.columns)} campos.")
except FileNotFoundError:
    print("‚ùå Error: El archivo 'respuestas_cisco.csv' no se encontr√≥.")
    exit()
except Exception as e:
    print(f"‚ùå Error al cargar el CSV: {str(e)}")
    exit()

# --- LIMPIEZA Y PREPARACI√ìN ---
# Renombrar columnas para un acceso m√°s f√°cil
df.rename(columns={
    '¬øEn qu√© ciclo se encuentra actualmente?': 'ciclo',
    '¬øHa tomado anteriormente alg√∫n curso en la plataforma Cisco NetAcad?': 'experiencia_previa',
    'Redes y ciberseguridad ': 'cursos_redes', # El espacio al final es importante
    'IA y Ciencia de Datos': 'cursos_ia',
    'Programaci√≥n': 'cursos_programacion',
    'Hardware  y Sistemas Operativos': 'cursos_so',
    '¬øQu√© modalidad prefiere para tomar estos cursos?': 'modalidad',
    '¬øQu√© tan dispuesto/a estar√≠a a participar en un curso opcional de este tipo durante el semestre?': 'disposicion',
    '¬øQu√© d√≠as y horarios prefiere para tomar este tipo de cursos presenciales o s√≠ncronos?': 'horario'
}, inplace=True)

# Eliminar filas completamente vac√≠as y valores nulos en columnas clave
df = df.dropna(how='all')

# --- FUNCIONES DE AN√ÅLISIS MEJORADAS ---

def analizar_respuestas_multiples(dataframe, columna, titulo, archivo_salida, max_items=10):
    """
    Toma una columna con strings de valores separados por comas,
    los separa, cuenta las ocurrencias y genera un gr√°fico de barras horizontal.
    """
    # Verificar si la columna existe
    if columna not in dataframe.columns:
        print(f"‚ùå Error: La columna '{columna}' no existe en el dataframe.")
        return pd.Series()
    
    # 1. Separar los strings por comas, eliminar espacios, valores vac√≠os y crear una lista √∫nica
    items_series = dataframe[columna].dropna().astype(str)
    all_items = []
    
    for respuesta in items_series:
        # Solo procesar si no es una cadena vac√≠a
        if respuesta and respuesta.strip():
            items = [item.strip() for item in respuesta.split(',') if item.strip()]
            all_items.extend(items)
    
    # 2. Contar la frecuencia de cada item y obtener los m√°s populares
    counter = Counter(all_items)
    conteo = pd.Series(dict(counter.most_common(max_items)))
    
    if conteo.empty:
        print(f"‚ö†Ô∏è Advertencia: No hay datos para analizar en '{columna}'.")
        return pd.Series()
    
    # 3. Ordenar por frecuencia y generar el gr√°fico horizontal
    plt.figure(figsize=(12, max(7, len(conteo)*0.4)))  # Ajustar altura din√°micamente
    ax = sns.barplot(x=conteo.values, y=conteo.index, palette='viridis', hue=conteo.index, dodge=False, legend=False)
    
    # A√±adir valores num√©ricos a las barras
    for i, v in enumerate(conteo.values):
        ax.text(v + 0.5, i, str(v), va='center')
    
    ax.set_title(titulo, fontsize=16, fontweight='bold')
    ax.set_xlabel('N√∫mero de Estudiantes', fontsize=12)
    ax.set_ylabel('Cursos', fontsize=12)
    
    # Mejorar el formato del gr√°fico
    ax.grid(axis='x', alpha=0.3)
    plt.tight_layout()
    
    # 4. Guardar el gr√°fico
    ruta_guardado = f'static/images/{archivo_salida}'
    plt.savefig(ruta_guardado, dpi=100, bbox_inches='tight')
    plt.close()
    print(f"üìä Gr√°fico generado: {ruta_guardado}")
    
    # 5. Calcular estad√≠sticas adicionales
    total_selecciones = sum(conteo.values)
    promedio = total_selecciones / len(conteo) if len(conteo) > 0 else 0
    
    print(f"   - Total de selecciones: {total_selecciones}")
    print(f"   - Promedio por opci√≥n: {promedio:.2f}")
    
    return conteo

def analizar_respuesta_unica(dataframe, columna, titulo, archivo_salida, tipo_grafico='pie'):
    """
    Analiza columnas de respuesta √∫nica generando gr√°ficos mejorados.
    """
    # Verificar si la columna existe
    if columna not in dataframe.columns:
        print(f"‚ùå Error: La columna '{columna}' no existe en el dataframe.")
        return pd.DataFrame()
    
    # Filtrar valores nulos y contar frecuencias
    serie_filtrada = dataframe[columna].dropna()
    if serie_filtrada.empty:
        print(f"‚ö†Ô∏è Advertencia: No hay datos para analizar en '{columna}'.")
        return pd.DataFrame()
    
    conteo = serie_filtrada.value_counts()
    
    plt.figure(figsize=(12, 8))
    
    if tipo_grafico == 'pie':
        # Calcular porcentajes para las etiquetas
        sizes = conteo.values
        total = sum(sizes)
        labels = [f"{item} ({size/total*100:.1f}%)" for item, size in zip(conteo.index, sizes)]
        
        # Crear gr√°fico de pastel con destacado de la porci√≥n m√°s grande
        explode = [0.1 if i == conteo.values.argmax() else 0 for i in range(len(conteo))]
        
        plt.pie(sizes, labels=labels, explode=explode, autopct='%1.1f%%', 
                startangle=140, colors=CISCO_COLORS[:len(conteo)],
                shadow=True, wedgeprops={'edgecolor': 'white', 'linewidth': 1})
        plt.title(titulo, fontsize=16, fontweight='bold', pad=20)
        plt.axis('equal')  # Para que el c√≠rculo sea un c√≠rculo
        
    else:  # Gr√°fico de barras
        # Fix seaborn warning by using hue parameter correctly
        ax = sns.barplot(x=conteo.index, y=conteo.values, hue=conteo.index, palette=CISCO_COLORS[:len(conteo)], legend=False)
        
        # A√±adir valores sobre las barras
        for i, v in enumerate(conteo.values):
            ax.text(i, v + 0.1, str(v), ha='center')
            
        ax.set_title(titulo, fontsize=16, fontweight='bold')
        ax.set_ylabel('N√∫mero de Estudiantes', fontsize=12)
        ax.set_xlabel('')
        
        # Rotar etiquetas si son largas
        if max([len(str(x)) for x in conteo.index]) > 10:
            plt.xticks(rotation=30, ha="right")
        
        ax.grid(axis='y', alpha=0.3)

    plt.tight_layout()
    
    # Guardar el gr√°fico
    ruta_guardado = f'static/images/{archivo_salida}'
    plt.savefig(ruta_guardado, dpi=100, bbox_inches='tight')
    plt.close()
    print(f"üìä Gr√°fico generado: {ruta_guardado}")
    
    # Convertir a DataFrame con porcentajes
    total = conteo.sum()
    df_resultado = conteo.to_frame(name='Cantidad')
    df_resultado['Porcentaje'] = df_resultado['Cantidad'] / total * 100
    
    return df_resultado

# Funci√≥n para generar un resumen estad√≠stico
def generar_resumen_estadistico():
    """
    Genera un resumen estad√≠stico de los datos principales y lo guarda como CSV
    """
    # Contar estudiantes por ciclo
    ciclos = df['ciclo'].value_counts().reset_index()
    ciclos.columns = ['Ciclo', 'Cantidad']
    
    # Calcular experiencia previa
    experiencia = df['experiencia_previa'].value_counts().reset_index()
    experiencia.columns = ['Experiencia', 'Cantidad']
    
    # Preferencia de modalidad
    modalidad = df['modalidad'].value_counts().reset_index()
    modalidad.columns = ['Modalidad', 'Cantidad']
    
    # Resumen general
    resumen = {
        'Total de respuestas': len(df),
        'Estudiantes con experiencia previa': experiencia[experiencia['Experiencia'] == 'S√≠']['Cantidad'].values[0] if 'S√≠' in experiencia['Experiencia'].values else 0,
        'Modalidad m√°s solicitada': modalidad.iloc[0]['Modalidad'],
        'N√∫mero de estudiantes en modalidad preferida': modalidad.iloc[0]['Cantidad']
    }
    
    # Guardar como CSV para uso futuro
    pd.DataFrame([resumen]).to_csv('static/resumen_estadistico.csv', index=False)
    
    return resumen

# Funci√≥n para analizar inter√©s por √°rea
def analizar_interes_por_area():
    """
    Compara el inter√©s en las diferentes √°reas tem√°ticas
    """
    # Contar respuestas no vac√≠as en cada columna de cursos
    areas = ['cursos_redes', 'cursos_ia', 'cursos_programacion', 'cursos_so']
    nombres = ['Redes y Ciberseguridad', 'IA y Ciencia de Datos', 'Programaci√≥n', 'Hardware y SO']
    
    # Contar respuestas no vac√≠as (que indican inter√©s)
    interes = {}
    for area, nombre in zip(areas, nombres):
        interes[nombre] = df[area].notna().sum()
    
    # Crear gr√°fico
    plt.figure(figsize=(10, 6))
    ax = sns.barplot(x=list(interes.keys()), y=list(interes.values()), 
                     hue=list(interes.keys()), palette=CISCO_COLORS[:4], legend=False)
    
    # A√±adir etiquetas
    for i, v in enumerate(interes.values()):
        ax.text(i, v + 1, str(v), ha='center')
    
    ax.set_title('Inter√©s por √Årea Tem√°tica', fontsize=16, fontweight='bold')
    ax.set_ylabel('N√∫mero de Estudiantes Interesados', fontsize=12)
    ax.set_xlabel('')
    plt.tight_layout()
    
    # Guardar
    plt.savefig('static/images/interes_por_area.png', dpi=100, bbox_inches='tight')
    plt.close()
    
    return interes

# Funci√≥n para analizar disposici√≥n por ciclo
def analizar_disposicion_por_ciclo():
    """
    Analiza la disposici√≥n a participar seg√∫n el ciclo acad√©mico
    """
    # Crear tabla pivote
    pivot = pd.crosstab(df['ciclo'], df['disposicion'])
    
    # Normalizar por fila para obtener porcentajes
    pivot_norm = pivot.div(pivot.sum(axis=1), axis=0) * 100
    
    # Graficar
    plt.figure(figsize=(12, 8))
    ax = pivot_norm.plot(kind='bar', stacked=True, colormap='viridis')
    
    ax.set_title('Disposici√≥n a Participar por Ciclo Acad√©mico', fontsize=16, fontweight='bold')
    ax.set_ylabel('Porcentaje (%)', fontsize=12)
    ax.set_xlabel('Ciclo', fontsize=12)
    ax.legend(title='Disposici√≥n')
    
    # Guardar
    plt.tight_layout()
    plt.savefig('static/images/disposicion_por_ciclo.png', dpi=100, bbox_inches='tight')
    plt.close()
    
    return pivot

# Funci√≥n para analizar los cursos m√°s populares por ciclo acad√©mico
def analizar_cursos_por_ciclo():
    """
    Analiza los cursos m√°s populares para cada ciclo acad√©mico
    y genera un gr√°fico comparativo.
    """
    print("\nAnalizando cursos m√°s populares por ciclo acad√©mico:")
    
    # Definir los ciclos y columnas de cursos
    ciclos = df['ciclo'].unique()
    columnas_cursos = ['cursos_redes', 'cursos_ia', 'cursos_programacion', 'cursos_so']
    
    # Diccionario para almacenar el curso m√°s popular por ciclo
    cursos_por_ciclo = {}
    
    # Para cada ciclo, encontrar el curso m√°s popular entre todas las categor√≠as
    for ciclo in ciclos:
        # Filtrar el dataframe para este ciclo
        df_ciclo = df[df['ciclo'] == ciclo]
        
        # Contar todos los cursos mencionados en todas las categor√≠as
        all_cursos = []
        
        for col in columnas_cursos:
            items_series = df_ciclo[col].dropna().astype(str)
            
            for respuesta in items_series:
                if respuesta and respuesta.strip():
                    items = [item.strip() for item in respuesta.split(',') if item.strip()]
                    all_cursos.extend(items)
        
        # Si no hay cursos para este ciclo, continuar con el siguiente
        if not all_cursos:
            continue
        
        # Encontrar el curso m√°s popular
        counter = Counter(all_cursos)
        curso_mas_popular, conteo = counter.most_common(1)[0]
        
        # Almacenar el resultado
        cursos_por_ciclo[ciclo] = {
            'curso': curso_mas_popular,
            'conteo': conteo
        }
    
    # Preparar datos para graficar
    ciclos_ord = sorted(cursos_por_ciclo.keys(), 
                        key=lambda x: (
                            # Primero los ciclos num√©ricos
                            0 if any(c.isdigit() for c in str(x)) else 1,
                            # Ordenar primero por n√∫mero
                            int(''.join(c for c in str(x) if c.isdigit() or c == '.').split('.')[0]) 
                            if any(c.isdigit() for c in str(x)) else 999,
                            # Luego por texto
                            str(x)
                        ))
    
    ciclos_graf = [str(c) for c in ciclos_ord]
    cursos_graf = [cursos_por_ciclo[c]['curso'] for c in ciclos_ord]
    conteos_graf = [cursos_por_ciclo[c]['conteo'] for c in ciclos_ord]
    
    # Crear gr√°fico
    plt.figure(figsize=(14, 8))
    
    # Usar barras horizontales para nombres de cursos largos
    ax = plt.barh(ciclos_graf, conteos_graf, color=CISCO_COLORS[:len(ciclos_graf)])
    
    # Agregar etiquetas con el nombre del curso en cada barra
    for i, (curso, conteo) in enumerate(zip(cursos_graf, conteos_graf)):
        # Acortar nombre del curso si es muy largo
        curso_texto = curso if len(curso) < 30 else curso[:27] + "..."
        plt.text(
            conteo + 0.3,  # Posici√≥n x (ligeramente a la derecha de la barra)
            i,             # Posici√≥n y (√≠ndice de la barra)
            curso_texto,   # Texto a mostrar
            va='center',   # Alineaci√≥n vertical centrada
            fontsize=9,    # Tama√±o de fuente
            fontweight='bold'
        )
    
    plt.title('Curso M√°s Popular por Ciclo Acad√©mico', fontsize=16, fontweight='bold')
    plt.xlabel('N√∫mero de Estudiantes', fontsize=12)
    plt.ylabel('Ciclo Acad√©mico', fontsize=12)
    plt.grid(axis='x', alpha=0.3)
    plt.tight_layout()
    
    # Guardar gr√°fico
    ruta_guardado = 'static/images/cursos_por_ciclo.png'
    plt.savefig(ruta_guardado, dpi=100, bbox_inches='tight')
    plt.close()
    print(f"üìä Gr√°fico generado: {ruta_guardado}")
    
    return cursos_por_ciclo

# Funci√≥n para exportar resultados a JSON
def exportar_resultados_json():
    """
    Exporta los resultados del an√°lisis a un archivo JSON estructurado
    para facilitar la generaci√≥n de informes.
    """
    print("\nExportando resultados a JSON...")
    
    # An√°lisis de cursos por ciclo
    cursos_por_ciclo = analizar_cursos_por_ciclo()
    
    # Crear estructura del JSON
    resultados = {
        "meta": {
            "fecha_analisis": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
            "version": "1.0",
            "total_respuestas": int(len(df))  # Convert to regular Python int
        },
        "resumen": {k: (int(v) if isinstance(v, (np.integer, np.int64)) else v) 
                    for k, v in generar_resumen_estadistico().items()},
        "preferencias": {
            "modalidad": {str(k): int(v) for k, v in df['modalidad'].value_counts().to_dict().items()},
            "disposicion": {str(k): int(v) for k, v in df['disposicion'].value_counts().to_dict().items()},
            "horarios": analizar_horarios_preferidos()
        },
        "interes_por_area": analizar_interes_por_area_json(),
        "cursos_populares": {
            "redes_ciberseguridad": obtener_top_cursos('cursos_redes', 10),
            "ia_ciencia_datos": obtener_top_cursos('cursos_ia', 10),
            "programacion": obtener_top_cursos('cursos_programacion', 10),
            "hardware_so": obtener_top_cursos('cursos_so', 10)
        },
        "analisis_por_ciclo": {
            "modalidad_preferida": {str(k): str(v) for k, v in df.groupby('ciclo')['modalidad'].agg(lambda x: x.value_counts().index[0]).to_dict().items()},
            "disposicion": obtener_disposicion_por_ciclo_json(),
            "curso_mas_popular": {str(k): {"curso": v["curso"], "conteo": int(v["conteo"])} for k, v in cursos_por_ciclo.items()}
        },
        "experiencia_previa": {str(k): int(v) for k, v in df['experiencia_previa'].value_counts().to_dict().items()},
        "sugerencias": obtener_sugerencias()
    }
    
    # Guardar el JSON usando el encoder personalizado
    ruta_json = 'static/resultados_analisis.json'
    with open(ruta_json, 'w', encoding='utf-8') as f:
        json.dump(resultados, f, ensure_ascii=False, indent=4, cls=NumpyEncoder)
    
    print(f"‚úÖ Resultados exportados a: {ruta_json}")
    return resultados

# Funciones auxiliares para el JSON

def analizar_horarios_preferidos():
    """Obtiene los horarios preferidos en formato de diccionario"""
    horarios = df['horario'].dropna().astype(str)
    all_horarios = []
    
    for respuesta in horarios:
        if respuesta and respuesta.strip():
            items = [item.strip() for item in respuesta.split(',') if item.strip()]
            all_horarios.extend(items)
    
    # Convert Counter results to regular Python types
    return {str(k): int(v) for k, v in Counter(all_horarios).most_common()}

def analizar_interes_por_area_json():
    """An√°lisis de inter√©s por √°rea en formato para JSON"""
    areas = ['cursos_redes', 'cursos_ia', 'cursos_programacion', 'cursos_so']
    nombres = ['Redes y Ciberseguridad', 'IA y Ciencia de Datos', 'Programaci√≥n', 'Hardware y SO']
    
    interes = {}
    for area, nombre in zip(areas, nombres):
        # Convert NumPy int64 to regular Python int
        interes[nombre] = int(df[area].notna().sum())
    
    return interes

def obtener_top_cursos(columna, n=10):
    """Obtiene los top n cursos m√°s populares de una columna"""
    if columna not in df.columns:
        return {}
    
    items_series = df[columna].dropna().astype(str)
    all_items = []
    
    for respuesta in items_series:
        if respuesta and respuesta.strip():
            items = [item.strip() for item in respuesta.split(',') if item.strip()]
            all_items.extend(items)
    
    counter = Counter(all_items)
    # Convert to regular Python types for JSON serialization
    return {str(k): int(v) for k, v in counter.most_common(n)}

def obtener_disposicion_por_ciclo_json():
    """Obtiene la disposici√≥n por ciclo en formato JSON"""
    pivot = pd.crosstab(df['ciclo'], df['disposicion'])
    result = {}
    
    for ciclo in pivot.index:
        # Convert all values to regular Python types
        result[str(ciclo)] = {str(k): int(v) for k, v in pivot.loc[ciclo].to_dict().items()}
    
    return result

def obtener_sugerencias():
    """Extrae las sugerencias de los estudiantes"""
    if '¬øQu√© sugerencias tiene para estos cursos o qu√© otros temas le gustar√≠a que se incluyan?' in df.columns:
        col = '¬øQu√© sugerencias tiene para estos cursos o qu√© otros temas le gustar√≠a que se incluyan?'
        return df[col].dropna().tolist()
    return []

# Funci√≥n principal que ejecuta todos los an√°lisis
def generar_todos_los_analisis():
    print("\n--- INICIANDO AN√ÅLISIS ---")
    
    # 1. Cursos m√°s populares por √°rea
    print("\nAnalizando preferencias de cursos por √°rea:")
    analizar_respuestas_multiples(df, 'cursos_redes', 'Top Cursos de Redes y Ciberseguridad', 'cursos_redes.png')
    analizar_respuestas_multiples(df, 'cursos_ia', 'Top Cursos de IA y Ciencia de Datos', 'cursos_ia.png')
    analizar_respuestas_multiples(df, 'cursos_programacion', 'Top Cursos de Programaci√≥n', 'cursos_programacion.png')
    analizar_respuestas_multiples(df, 'cursos_so', 'Top Cursos de Hardware y SO', 'cursos_so.png')
    
    # 2. An√°lisis general
    print("\nAnalizando preferencias generales:")
    analizar_respuesta_unica(df, 'modalidad', 'Modalidad Preferida por los Estudiantes', 'modalidad.png', tipo_grafico='bar')
    analizar_respuesta_unica(df, 'disposicion', 'Disposici√≥n a Participar en Cursos', 'disposicion.png')
    analizar_respuestas_multiples(df, 'horario', 'Horarios de Preferencia', 'horarios.png')
    analizar_respuesta_unica(df, 'experiencia_previa', 'Experiencia Previa en Cisco NetAcad', 'experiencia.png')
    
    # 3. An√°lisis por ciclo
    print("\nAnalizando datos por segmentos:")
    ciclos_interes = df.groupby('ciclo')['modalidad'].agg(lambda x: x.value_counts().index[0])
    print("\nModalidad preferida por ciclo:")
    print(ciclos_interes)
    
    # 4. Nuevos an√°lisis
    print("\nGenerando an√°lisis adicionales:")
    analizar_interes_por_area()
    analizar_disposicion_por_ciclo()
    analizar_cursos_por_ciclo()  # Agregar esta l√≠nea
    
    # 5. Resumen estad√≠stico
    print("\nGenerando resumen estad√≠stico:")
    resumen = generar_resumen_estadistico()
    for key, value in resumen.items():
        print(f"   - {key}: {value}")
    
    # 6. Exportar resultados a JSON
    print("\nExportando resultados a JSON:")
    exportar_resultados_json()
    
    print("\n--- AN√ÅLISIS COMPLETADO ---\n")
    return True

# Si ejecutamos este script directamente, generar√° los gr√°ficos
if __name__ == '__main__':
    generar_todos_los_analisis()